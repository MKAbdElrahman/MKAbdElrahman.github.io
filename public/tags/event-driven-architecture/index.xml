<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Event-Driven Architecture on Mohamed Kamal</title>
    <link>https://mkabdelrahman.github.io/tags/event-driven-architecture/</link>
    <description>Recent content in Event-Driven Architecture on Mohamed Kamal</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mkabdelrahman.github.io/tags/event-driven-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EDA Patterns: Thin and Thick Events</title>
      <link>https://mkabdelrahman.github.io/posts/eda-patterns-thin-thick-events/</link>
      <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate>
      <guid>https://mkabdelrahman.github.io/posts/eda-patterns-thin-thick-events/</guid>
      <description>Event-driven systems (EDS) rely on exchanging events for communication. Other services subscribe to these events and react accordingly. This loose coupling keeps services unaware of each other, with the only connection being the event&amp;rsquo;s data format. Since events act as contracts, careful design and consideration for future changes are crucial.&#xA;Scenario: Imagine an e-commerce application. When a customer submits an order, the order service emits an &amp;ldquo;order-requested&amp;rdquo; event. Both the payment service and inventory service are interested in this event.</description>
    </item>
    <item>
      <title>EDA Patterns: The Single Writer Principle</title>
      <link>https://mkabdelrahman.github.io/posts/eda-single-write-principle/</link>
      <pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://mkabdelrahman.github.io/posts/eda-single-write-principle/</guid>
      <description>The Single Writer Principle states that only one service should be responsible for making changes to a specific type of data or event.&#xA;Let&amp;rsquo;s consider an e-commerce system with separate services for Orders, Payments, and Shipments. In this scenario, the Order service serves as the single writer for all order-related data. Here&amp;rsquo;s how it works:&#xA;When a customer clicks &amp;ldquo;buy,&amp;rdquo; the Basket service triggers an &amp;ldquo;Order Requested&amp;rdquo; event. The Order service receives this event, validates the order details, and publishes an &amp;ldquo;Order Confirmed&amp;rdquo; event if successful.</description>
    </item>
    <item>
      <title>EDA Patterns: Event sourcing &amp; CQRS</title>
      <link>https://mkabdelrahman.github.io/posts/cqrs/</link>
      <pubDate>Sat, 27 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://mkabdelrahman.github.io/posts/cqrs/</guid>
      <description>Event sourcing is a data management approach that centers around events, recognizing them as the core building blocks of any system. These events, representing state changes, are stored in an immutable append-only log, preserving the order they occurred in. This approach offers a comprehensive audit trail of the system&amp;rsquo;s activity and allows replaying the event log to reconstruct the current system state.&#xA;CQRS, or Command Query Responsibility Segregation, complements event sourcing by advocating for the separation of write operations (commands) and read operations (queries).</description>
    </item>
    <item>
      <title>EDA Patterns: Idempotent Integration with a Third-Party REST API</title>
      <link>https://mkabdelrahman.github.io/posts/idempotentintegrationwithathird-partyrestapi/</link>
      <pubDate>Fri, 26 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://mkabdelrahman.github.io/posts/idempotentintegrationwithathird-partyrestapi/</guid>
      <description>Scenario:&#xA;You have an event-driven application that needs to integrate with a third-party REST API (Service B) without modifying it. To ensure reliable message processing, you want to introduce Service A as a mediator that consumes events and interacts with Service B in an idempotent manner.&#xA;Idempotency Requirement:&#xA;Service A: Service A must be idempotent to prevent duplicate event processing. This means if the same event is received multiple times, Service A should only process it once.</description>
    </item>
  </channel>
</rss>
