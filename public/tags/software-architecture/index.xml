<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Architecture on Mohamed Kamal</title>
    <link>http://localhost:1313/tags/software-architecture/</link>
    <description>Recent content in Software Architecture on Mohamed Kamal</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 09 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/software-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sagas Quantatively: Fantasy Fiction</title>
      <link>http://localhost:1313/posts/saga-fantasyfiction/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/saga-fantasyfiction/</guid>
      <description>Last time, we discussed the first saga cataloged by Mark Richards and Neal Ford in their book, &amp;ldquo;Software Architecture: The Hard Parts&amp;rdquo;. We saw how the epic saga is exponentially sensitive to the availabilities of the orchestrator and the orchestrated services. We also noted how latency worsens with increasing availability due to the sequential blocking model. Today, we will discuss the second saga they called the fantasy fiction saga. In this saga, we switch from a blocking communication model to a non-blocking one while maintaining the atomicity constraint.</description>
    </item>
    <item>
      <title>Sagas Quantatively: Epic Saga</title>
      <link>http://localhost:1313/posts/saga-epic/</link>
      <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/saga-epic/</guid>
      <description>When we transition to microservices, each service owns its data. Achieving transactions across multiple services isn&amp;rsquo;t as straightforward as with a single monolithic database.&#xA;One way to address this challenge is through sagas, which simulate distributed transactions using a series of local transactions. This approach was popularized by Chris Richardson and later analyzed by Mark Richards and Neal Ford in their book &amp;lsquo;Sotware Architecture: The Hard Parts&amp;rsquo;.&#xA;They examined how these factors affect saga characteristics:</description>
    </item>
    <item>
      <title>Microservices: Why Not a Shared Monolithic Database?</title>
      <link>http://localhost:1313/posts/why-not-shared-db/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/why-not-shared-db/</guid>
      <description>In microservices, the idea of using a shared monolithic database is always rejected. There are several reasons why this approach is not advisable. Below are the key considerations that highlight the drawbacks of a shared monolithic database.&#xA;Change Control Link to heading Managing changes in a shared monolithic database is a complex task. Any schema change necessitates coordination across all dependent services, which can be cumbersome and time-consuming. This coordination is required to ensure that all services are redeployed simultaneously to prevent schema mismatch errors, which can cause significant downtime and service disruption.</description>
    </item>
    <item>
      <title>Data Sharing Between Microservices Using Synchronized Embedded Caches</title>
      <link>http://localhost:1313/posts/caching_data-shraing-embedded-cache/</link>
      <pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/caching_data-shraing-embedded-cache/</guid>
      <description>Setting the Scene Link to heading Consider an online food delivery system with two essential microservices:&#xA;Menu Service: Manages the list of available dishes. Order Service: Allows customers to create and manage their orders. How It Works Link to heading Starting the Menu Service:&#xA;The menu service starts and loads a cache containing information about available dishes. This cache is distributed, enabling it to be shared across different services. Starting the Order Service:</description>
    </item>
    <item>
      <title>Caching: Topologies and Patterns</title>
      <link>http://localhost:1313/posts/caching_patterns/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/caching_patterns/</guid>
      <description>What is a Cache? Link to heading A cache is a secondary data store that’s faster to read from than the data’s primary store. The purpose of a cache is to improve application performance by:&#xA;Reducing network calls to the primary data store: Instead of repeatedly querying the database, the cache handles data retrieval, offloading processing from the database. This reduces database connection consumption, often a limiting factor, and allows the database to perform faster.</description>
    </item>
    <item>
      <title>Software Architecture: Partitioning Strategies</title>
      <link>http://localhost:1313/posts/head-first-architecture-partitioning/</link>
      <pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/head-first-architecture-partitioning/</guid>
      <description>Distributed or Single Process Link to heading Single Process Application: A self-contained program that executes on a single computer. It handles all its processing tasks, data storage, and retrieval using the local machine&amp;rsquo;s resources (memory and storage). Examples include offline games and mobile apps without network functionality.&#xA;Distributed System: A software program designed to function across multiple computers connected over a network. These applications are broken down into smaller components that run on different machines.</description>
    </item>
    <item>
      <title>Software Architecture: Architectural Characteristics</title>
      <link>http://localhost:1313/posts/hfsa-architectural-charcteristics-part-1/</link>
      <pubDate>Fri, 29 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/hfsa-architectural-charcteristics-part-1/</guid>
      <description>Why Architectural Characteristics Link to heading Architectural characteristics are fundamental to making informed decisions throughout the software development process. Here&amp;rsquo;s why they&amp;rsquo;re important:&#xA;Guiding Architectural Decisions: Without a clear understanding of these characteristics, it&amp;rsquo;s difficult to make informed choices about your application&amp;rsquo;s structure.&#xA;Selecting an Architectural Style: Different architectural styles are better suited for specific needs. Analyzing characteristics helps you choose the most appropriate style for your project.&#xA;What are Architectural Characteristics?</description>
    </item>
    <item>
      <title>Software Architecture Vs. Design</title>
      <link>http://localhost:1313/posts/head-first-software-architecture-and-design/</link>
      <pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/head-first-software-architecture-and-design/</guid>
      <description>Architecture is primarily concerned with the structure of the system, including its services, databases, and how they communicate with each other. Design, on the other hand, focuses more on the easy to change later decesions like choosing a specific design pattern or whether to split a class or not.&#xA;The line between architecture and design can sometimes be blurry. Understanding the difference, however, is crucial for determining who should make key decisions throughout a project.</description>
    </item>
    <item>
      <title>Software Architecture: A 4-Dimensional View</title>
      <link>http://localhost:1313/posts/head-first-architecture-dimensions/</link>
      <pubDate>Tue, 26 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/head-first-architecture-dimensions/</guid>
      <description>Software Architecture: A 4-Dimensional View Link to heading Software architecture isn&amp;rsquo;t a singular concept, but rather a multi-dimensional approach to building robust and adaptable systems. Let&amp;rsquo;s explore these key dimensions:&#xA;1. Architectural Characteristics&#xA;Architectural characteristics are the essential capabilities your system needs to possess. They determine how the system will perform, like speed (performance) and uptime (availability). These are also known as &amp;ldquo;ilities&amp;rdquo; for the suffix they often share (scalability, reliability, etc.</description>
    </item>
  </channel>
</rss>
