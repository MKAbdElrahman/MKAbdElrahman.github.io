<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Mohamed Kamal</title>
    <link>http://localhost:1313/tags/go/</link>
    <description>Recent content in Go on Mohamed Kamal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding XSS Attacks and Contextual Encoding in Go</title>
      <link>http://localhost:1313/posts/xss/</link>
      <pubDate>Sun, 03 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/xss/</guid>
      <description>XSS (Cross-Site Scripting) Link to heading XSS is a critical security vulnerability that arises when a web application allows an attacker to inject malicious scripts into web pages, which are then viewed by other users. Contextual encoding serves as a crucial defense mechanism against XSS attacks. When user input is presented on a web page, it must undergo proper encoding to ensure that any potential script content is treated as data rather than executable code.</description>
    </item>
    <item>
      <title>Go Context Package: Cause-aware Context Cancellation</title>
      <link>http://localhost:1313/posts/cause/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cause/</guid>
      <description>The context package in Go has recently introduced cause-aware context cancellation functions. This update includes the WithCancelCause, WithDeadlineCause, and WithTimeoutCause functions, as well as the Cause function for retrieving the cause of context cancellation.&#xA;func WithCancelCause(parent Context) (ctx Context, cancel CancelCauseFunc) This function is analogous to WithCancel, but it returns a CancelCauseFunc that allows setting an error as the cause of cancellation.&#xA;func WithDeadlineCause(parent Context, d time.Time, cause error) (Context, CancelFunc) Combining features of WithDeadline with the ability to provide a cause for context cancellation.</description>
    </item>
    <item>
      <title>Go Context Package: AfterFunc</title>
      <link>http://localhost:1313/posts/afterfunc/</link>
      <pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/afterfunc/</guid>
      <description>The AfterFunc function in Go&amp;rsquo;s context package provides a robust tool for scheduling the execution of a specified function after a given context concludes, be it due to cancellation or a timeout. This blog post delves into the practical application of AfterFunc through an illustrative example, shedding light on its functionality and potential use cases.&#xA;The AfterFunc Signature Link to heading func AfterFunc(ctx Context, f func()) (stop func() bool) ctx: The context that determines when the function f should be executed.</description>
    </item>
    <item>
      <title>Simplify Configuration Management in Go with the &#39;conf&#39; Package</title>
      <link>http://localhost:1313/posts/go-conf-pkg/</link>
      <pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/go-conf-pkg/</guid>
      <description>The &amp;ldquo;conf&amp;rdquo; package is designed to make configuration management in Go straightforward and flexible. It allows you to define your application&amp;rsquo;s configuration as a struct and then parse it for both environment variables and command-line arguments. This approach makes it easy to handle different configuration sources, and the package provides a variety of customization options through struct tags.&#xA;First, you need to install the &amp;ldquo;conf&amp;rdquo; package:&#xA;go get github.com/ardanlabs/conf/v3 Define a struct that represents your application&amp;rsquo;s configuration.</description>
    </item>
    <item>
      <title>Understanding Go&#39;s init Functions: Best Practices and Common Misuses</title>
      <link>http://localhost:1313/posts/go-init-functions/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/go-init-functions/</guid>
      <description>In Go, init functions play a crucial role in package initialization. They are used to set up the initial state of your application, and their behavior can be both powerful and tricky to manage. In this blog post, we&amp;rsquo;ll delve into the concept of init functions, their use cases, execution order, and common pitfalls.&#xA;What Are init Functions? Link to heading In Go, an init function is a special type of function used for package-level initialization.</description>
    </item>
    <item>
      <title>Getting Started with Docker for Go</title>
      <link>http://localhost:1313/posts/docker-go/</link>
      <pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/docker-go/</guid>
      <description>What Is a Container? Link to heading Containers are like isolating an application so it thinks it&amp;rsquo;s running all by itself. It&amp;rsquo;s similar to a virtual machine (VM) but uses the host&amp;rsquo;s operating system instead of its own. To start a container, you begin with a container image that bundles up everything the application needs to run, making it easy to share and distribute.&#xA;The isolation that tricks a container into believing it has control over a whole Linux machine is achieved through the use of namespaces and control groups.</description>
    </item>
  </channel>
</rss>
