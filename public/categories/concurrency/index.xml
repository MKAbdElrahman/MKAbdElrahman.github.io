<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrency on Mohamed Kamal</title>
    <link>https://mkabdelrahman.github.io/categories/concurrency/</link>
    <description>Recent content in Concurrency on Mohamed Kamal</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 10 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mkabdelrahman.github.io/categories/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Synchronization with mutexes in Go</title>
      <link>https://mkabdelrahman.github.io/posts/mutex-in-go/</link>
      <pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mkabdelrahman.github.io/posts/mutex-in-go/</guid>
      <description>sync.Mutex Link to heading sync.Mutex is a mutual exclusion lock. It&amp;rsquo;s a basic locking mechanism used to protect shared resources from concurrent access by multiple goroutines. Only one goroutine can hold the lock at a time. Here&amp;rsquo;s a simple breakdown:&#xA;m.Lock(): When a goroutine calls m.Lock(), it attempts to acquire the lock. If no other goroutine holds the lock, it succeeds immediately. If another goroutine already holds the lock, the calling goroutine blocks (waits) until the lock becomes available.</description>
    </item>
    <item>
      <title>Go Context Package: Cause-aware Context Cancellation</title>
      <link>https://mkabdelrahman.github.io/posts/cause/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mkabdelrahman.github.io/posts/cause/</guid>
      <description>The context package in Go has recently introduced cause-aware context cancellation functions. This update includes the WithCancelCause, WithDeadlineCause, and WithTimeoutCause functions, as well as the Cause function for retrieving the cause of context cancellation.&#xA;func WithCancelCause(parent Context) (ctx Context, cancel CancelCauseFunc) This function is analogous to WithCancel, but it returns a CancelCauseFunc that allows setting an error as the cause of cancellation.&#xA;func WithDeadlineCause(parent Context, d time.Time, cause error) (Context, CancelFunc) Combining features of WithDeadline with the ability to provide a cause for context cancellation.</description>
    </item>
    <item>
      <title>Go Context Package: AfterFunc</title>
      <link>https://mkabdelrahman.github.io/posts/afterfunc/</link>
      <pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mkabdelrahman.github.io/posts/afterfunc/</guid>
      <description>The AfterFunc function in Go&amp;rsquo;s context package provides a robust tool for scheduling the execution of a specified function after a given context concludes, be it due to cancellation or a timeout. This blog post delves into the practical application of AfterFunc through an illustrative example, shedding light on its functionality and potential use cases.&#xA;The AfterFunc Signature Link to heading func AfterFunc(ctx Context, f func()) (stop func() bool) ctx: The context that determines when the function f should be executed.</description>
    </item>
  </channel>
</rss>
