<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distrubuted Storage on Mohamed Kamal</title>
    <link>https://mkabdelrahman.github.io/categories/distrubuted-storage/</link>
    <description>Recent content in Distrubuted Storage on Mohamed Kamal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mkabdelrahman.github.io/categories/distrubuted-storage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sharding: A Coffee Shop Analogy</title>
      <link>https://mkabdelrahman.github.io/posts/sharding/</link>
      <pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://mkabdelrahman.github.io/posts/sharding/</guid>
      <description>Remember our last blog post where we tamed the rush of order requests with a team of baristas dedicated to just reading orders? Well, get ready for another challenge! Our beloved coffee shop is brewing with excitement thanks to new customers and delicious new drinks. This means a flood of updates and sign-ups, and our trusty &amp;ldquo;master barista&amp;rdquo; who handles all these changes is feeling the pressure.&#xA;Just like throwing more baristas at a long line wouldn&amp;rsquo;t be the smartest idea, we need a well-thought-out plan to tackle this avalanche of updates.</description>
    </item>
    <item>
      <title>Replication Topologies for Scaling: A Coffee Shop Analogy</title>
      <link>https://mkabdelrahman.github.io/posts/replication-toplogies/</link>
      <pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://mkabdelrahman.github.io/posts/replication-toplogies/</guid>
      <description>Following the coffe shop analogy in the previous blog post, the coffee shop is booming, and you need to expand your team to handle the growing customer base. But simply adding more baristas isn&amp;rsquo;t enough. You need a well-organized system to ensure smooth operations, quick recovery from unexpected situations, and efficient storage of customer preferences. This is where replication topologies come in â€“ different ways to structure your team of baristas and order pads (replicas) to achieve specific goals.</description>
    </item>
    <item>
      <title>Replication and Sharding: A Coffee Shop Analogy</title>
      <link>https://mkabdelrahman.github.io/posts/replication-and-sharding/</link>
      <pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://mkabdelrahman.github.io/posts/replication-and-sharding/</guid>
      <description>Setting the Stage for Distributed Storage Link to heading Non-distributed Storage (Single-Master System):&#xA;Imagine your favorite local coffee shop. Keeping track of customer preferences on a simple notepad (single-server database) is a breeze. New entries are readily added, and the system is clear-cut. However, as the shop&amp;rsquo;s popularity explodes, the notepad becomes a bottleneck.&#xA;Read Replication Link to heading Read Replication:&#xA;The coffee shop thrives and attracts more customers. To handle the increased workload, the barista team expands.</description>
    </item>
  </channel>
</rss>
