<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Design on Mohamed Abdelrahman</title>
    <link>http://localhost:1313/categories/software-design/</link>
    <description>Recent content in Software Design on Mohamed Abdelrahman</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 20 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/software-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Coupling in Software Design</title>
      <link>http://localhost:1313/posts/coupling/</link>
      <pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/coupling/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/coupling.png&#34; alt=&#34;coupling&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-coupling&#34;&gt;What is Coupling?&lt;/h2&gt;&#xA;&lt;p&gt;Imagine you have two software components, A and B. In the worst-case scenario of tight coupling, changing one component unexpectedly affects the other, even if they don&amp;rsquo;t directly collaborate. This interdependence creates a tangled mess, making modifications difficult and prone to errors.&lt;/p&gt;&#xA;&lt;p&gt;However, software often thrives on collaboration. This is where loose coupling comes into play. Loose coupling promotes &lt;strong&gt;independence&lt;/strong&gt; between components. They can function with minimal reliance on each other&amp;rsquo;s internal workings. As a result, changes in one component have minimal impact on the other, leading to a more maintainable and adaptable system.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
