<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mohamed Abdelrahman</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Mohamed Abdelrahman</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 13 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Method Sets in Go</title>
      <link>http://localhost:1313/posts/go-method-sets/</link>
      <pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/go-method-sets/</guid>
      <description>&lt;h4 id=&#34;introduction-to-method-sets&#34;&gt;&lt;strong&gt;Introduction to Method Sets&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;In Go, the method set of a type defines the methods that can be called on a variable of that type. This concept is fundamental when working with methods, interfaces, and type implementations. Method sets vary depending on whether the type is a value, a pointer, or an interface.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;method-set-of-a-value-type&#34;&gt;&lt;strong&gt;Method Set of a Value Type&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;The method set of a value type includes only those methods that have a &lt;strong&gt;value receiver&lt;/strong&gt;. Methods with pointer receivers are &lt;strong&gt;not&lt;/strong&gt; part of the method set of a value type.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Resiliency Patterns: Retry and Circuit Breaker, Intuition Behind Them and How they Work Together</title>
      <link>http://localhost:1313/posts/resiliency-patterns-retry-circuit-breaker/</link>
      <pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/resiliency-patterns-retry-circuit-breaker/</guid>
      <description>&lt;p&gt;The purpose of this blog post to understand intituvely the retry and circuit breaker reseliency patterns. They are ofen involved to work around the unreliabilty of the network. Both are used to  handle error but differ in their  timescale. Mainly retrys are used to handle short term errors, those are errors that happen because of a netwrok glithch, the cause of the problem is expected to to be fixed in few seconds or less. Circuit Beakers is a smarter retry pattern. Here  the issue is expected to last for a long period of time, instead of hammering the server continously, we use smart strategy to probe its health instead of making the problem worse. May be the server is under high load and retrying only worsens the problem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Organize Your Codebase in Go (No MVCs, Onions, or Hexagons...)</title>
      <link>http://localhost:1313/posts/code-organization-go/</link>
      <pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/code-organization-go/</guid>
      <description>&lt;p&gt;Organizing code is all about how you break down your application logic into components, which typically translates to packages in Go. Early in my career, I was always searching for the “ideal” structure — where to put services, handlers, etc. There are countless articles out there recommending specific ways to organize code, each with its own approach.&lt;/p&gt;&#xA;&lt;p&gt;Deciding on a code structure is important, but it’s often done poorly. Developers can fall into the trap of overusing patterns encouraged by frameworks, applying them in contexts that may not be suitable. For instance, someone might choose Model-View-Controller (MVC) or Ports and Adapters, then feel pressured to arrange their code to fit that pattern just to satisfy the framework. This approach skips over the real challenge: decomposing your application logic into a set of cohesive, interacting components.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Resiliency Patterns: Implementing The Load Shedding Pattern in Go</title>
      <link>http://localhost:1313/posts/resiliency-patterns-load-shedding/</link>
      <pubDate>Sun, 03 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/resiliency-patterns-load-shedding/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Suppose your web service is experiencing a surge in traffic.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;When the load increases beyond what your service can handle, it can lead to slow responses, timeouts, and ultimately crashes. Load shedding allows your service to selectively drop requests when the load is too high. A targeted approach can also be used, where only low-priority requests are dropped, preserving capacity for critical requests.&lt;/p&gt;&#xA;&lt;p&gt;To effectively implement load shedding, you need to establish a mechanism to continuously monitor relevant control signals. Common control signals include:&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Dependency Injection Framework is Against Go Philosophy</title>
      <link>http://localhost:1313/posts/go-dependancy-injection/</link>
      <pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/go-dependancy-injection/</guid>
      <description>&lt;p&gt;If you’re a Java or .NET developer, you’re probably used to dependency injection being a core idea in web frameworks. Let&amp;rsquo;s first clarify what dependency injection is: it’s simply the practice of passing dependencies as arguments. If an object requires services from another object, instead of hardwiring it, you inject it through a factory method, constructor, or even a setter method. In Go, we don’t have constructors, and setting dependencies through setters is generally discouraged in most cases. Typically, we’ll have something like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Resiliency Patterns: Implemeting The Retry Pattern in Go</title>
      <link>http://localhost:1313/posts/resiliency-patterns-retry/</link>
      <pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/resiliency-patterns-retry/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Suppose service A needs to send a request to service B.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;If service B is unavailable, or requests are timing out due to high load or congestion, or if there’s an issue with the network that caused the request to fail, retrying the request might make sense—provided the operation is idempotent (can be retried without changing the result).&lt;/p&gt;&#xA;&lt;p&gt;To implement a retry algorithm effectively, we need to consider:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;When to stop retrying?&lt;/li&gt;&#xA;&lt;li&gt;How long to wait between retries?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;when-to-stop-retrying&#34;&gt;When to Stop Retrying?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;If the client times out the RPC call&lt;/strong&gt;: In Go, the context object is used to propagate cancellation signals. We need to listen to the done channel and stop retrying if the request was cancelled.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Resiliency Patterns: Implementing The Circuit Breaker Pattern in Go</title>
      <link>http://localhost:1313/posts/resiliency-patterns-circuit-breaker/</link>
      <pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/resiliency-patterns-circuit-breaker/</guid>
      <description>&lt;p&gt;The Circuit Breaker pattern helps protect services from cascading failures when they need to communicate over a network. Here’s how it works:&lt;/p&gt;&#xA;&lt;p&gt;Imagine &lt;strong&gt;Service A&lt;/strong&gt; needs to send requests to &lt;strong&gt;Service B&lt;/strong&gt;. If &lt;strong&gt;Service B&lt;/strong&gt; is down or not responding, continuing to send requests could make the issue worse. Service A might also be relied upon by other services (&lt;strong&gt;Service C, D, F&lt;/strong&gt;), so a failure in Service B could trigger a chain reaction of failures.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sagas Quantatively: Fantasy Fiction</title>
      <link>http://localhost:1313/posts/saga-fantasyfiction/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/saga-fantasyfiction/</guid>
      <description>&lt;p&gt;Last time, we discussed the first saga cataloged by Mark Richards and Neal Ford in their book, &amp;ldquo;Software Architecture: The Hard Parts&amp;rdquo;. We saw how the epic saga is exponentially sensitive to the availabilities of the orchestrator and the orchestrated services. We also noted how latency worsens with increasing availability due to the sequential blocking model.  Today, we will discuss the second saga they called the fantasy fiction saga. In this saga, we switch from a blocking communication model to a non-blocking one while maintaining the atomicity constraint.  In a previous post, I discussed why we should avoid using the terms synchronous and asynchronous, and instead use more explicit terms like blocking request-reply, non-blocking request-reply, and event-driven. Let’s apply these concepts to the fantasy fiction saga.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sagas Quantatively: Epic Saga</title>
      <link>http://localhost:1313/posts/saga-epic/</link>
      <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/saga-epic/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/saga/epic-saga.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;When we transition to microservices, each service owns its data. Achieving transactions across multiple services isn&amp;rsquo;t as straightforward as with a single monolithic database.&lt;/p&gt;&#xA;&lt;p&gt;One way to address this challenge is through sagas, which simulate distributed transactions using a series of local transactions. This approach was popularized by Chris Richardson and later analyzed by Mark Richards and Neal Ford in their book &amp;lsquo;Sotware Architecture: The Hard Parts&amp;rsquo;.&lt;/p&gt;&#xA;&lt;p&gt;They examined how these factors affect saga characteristics:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Microservices: Why Not a Shared Monolithic Database?</title>
      <link>http://localhost:1313/posts/why-not-shared-db/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/why-not-shared-db/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/microservices/shared-db.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;In microservices, the idea of using a shared monolithic database is always rejected. There are several reasons why this approach is not advisable. Below are the key considerations that highlight the drawbacks of a shared monolithic database.&lt;/p&gt;&#xA;&lt;h3 id=&#34;change-control&#34;&gt;Change Control&lt;/h3&gt;&#xA;&lt;p&gt;Managing changes in a shared monolithic database is a complex task. Any schema change necessitates coordination across all dependent services, which can be cumbersome and time-consuming. This coordination is required to ensure that all services are redeployed simultaneously to prevent schema mismatch errors, which can cause significant downtime and service disruption.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Data Sharing Between Microservices Using Synchronized Embedded Caches</title>
      <link>http://localhost:1313/posts/caching_data-shraing-embedded-cache/</link>
      <pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/caching_data-shraing-embedded-cache/</guid>
      <description>&lt;h3 id=&#34;setting-the-scene&#34;&gt;Setting the Scene&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/caching/data-sharing-embedded.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Consider an online food delivery system with two essential microservices:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Menu Service&lt;/strong&gt;: Manages the list of available dishes.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Order Service&lt;/strong&gt;: Allows customers to create and manage their orders.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;how-it-works&#34;&gt;How It Works&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Starting the Menu Service&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The menu service starts and loads a cache containing information about available dishes.&lt;/li&gt;&#xA;&lt;li&gt;This cache is distributed, enabling it to be shared across different services.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Starting the Order Service&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;When the order service starts, it recognizes the cache used by the menu service.&lt;/li&gt;&#xA;&lt;li&gt;The system facilitates a handshake between the services, allowing them to join the same cluster and establish a connection.&lt;/li&gt;&#xA;&lt;li&gt;Both services now know about each other. The menu service’s cache includes the list of dishes, and the order service synchronizes with this cache.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;demonstrating-synchronization&#34;&gt;Demonstrating Synchronization&lt;/h3&gt;&#xA;&lt;p&gt;Here’s how the two services interact:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Caching: Topologies and Patterns</title>
      <link>http://localhost:1313/posts/caching_patterns/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/caching_patterns/</guid>
      <description>&lt;h2 id=&#34;what-is-a-cache&#34;&gt;What is a Cache?&lt;/h2&gt;&#xA;&lt;p&gt;A cache is a secondary data store that’s faster to read from than the data’s primary store. The purpose of a cache is to improve application performance by:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Reducing network calls to the primary data store:&lt;/strong&gt; Instead of repeatedly querying the database, the cache handles data retrieval, offloading processing from the database. This reduces database connection consumption, often a limiting factor, and allows the database to perform faster.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Increasing performance:&lt;/strong&gt; Data in a cache is typically stored in random-access memory (RAM), providing quicker access than querying a database.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In distributed databases, the performance enhancement might be marginal due to network call latency, but the increase in scalability can be significant.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding Coupling in Software Design</title>
      <link>http://localhost:1313/posts/coupling/</link>
      <pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/coupling/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/coupling.png&#34; alt=&#34;coupling&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-coupling&#34;&gt;What is Coupling?&lt;/h2&gt;&#xA;&lt;p&gt;Imagine you have two software components, A and B. In the worst-case scenario of tight coupling, changing one component unexpectedly affects the other, even if they don&amp;rsquo;t directly collaborate. This interdependence creates a tangled mess, making modifications difficult and prone to errors.&lt;/p&gt;&#xA;&lt;p&gt;However, software often thrives on collaboration. This is where loose coupling comes into play. Loose coupling promotes &lt;strong&gt;independence&lt;/strong&gt; between components. They can function with minimal reliance on each other&amp;rsquo;s internal workings. As a result, changes in one component have minimal impact on the other, leading to a more maintainable and adaptable system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Observability: Introduction</title>
      <link>http://localhost:1313/posts/opentelemetry-part-1/</link>
      <pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/opentelemetry-part-1/</guid>
      <description>&lt;p&gt;Observability is the ability to understand the internal workings of a system by examining the signals it emits externally. This means you can gain insights into the system&amp;rsquo;s health and performance without needing to directly access its internal components.&lt;/p&gt;&#xA;&lt;p&gt;There are several reasons why observability is important. It allows you to troubleshoot problems more effectively by providing you with the data you need to identify the root cause of issues. It also enables you to answer questions about how your system is behaving and to proactively identify potential problems before they occur. This allows you to perform preventative maintenance and avoid outages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Observability: Introduction to OpenTelemetry</title>
      <link>http://localhost:1313/posts/open-telemetry-part2/</link>
      <pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/open-telemetry-part2/</guid>
      <description>&lt;h2 id=&#34;opentelemetry-a-standardized-approach-to-observability&#34;&gt;OpenTelemetry: A Standardized Approach to Observability&lt;/h2&gt;&#xA;&lt;p&gt;OpenTelemetry (OTel for short) simplifies how you gain insights into your applications&amp;rsquo; health and performance. It&amp;rsquo;s an observability framework that provides a consistent way to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Instrument your applications:&lt;/strong&gt; Regardless of the programming language, OTel offers language-specific libraries and APIs to streamline this process.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Generate telemetry data:&lt;/strong&gt; This data comes in three forms: metrics (numerical data), logs (event messages), and traces (which track request journeys).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Collect the data:&lt;/strong&gt; OTel acts as a central hub for gathering telemetry data from your applications.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Export the data:&lt;/strong&gt; You can choose the observability backend (analysis platform) that best suits your needs, thanks to OTel&amp;rsquo;s vendor neutrality.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;why-use-opentelemetry&#34;&gt;Why Use OpenTelemetry?&lt;/h2&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s what makes OTel so powerful:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Coding Best Practices: How to work with constructors with long list of parameters</title>
      <link>http://localhost:1313/posts/how-to-work-with-long-constrcutor-parameter-lists/</link>
      <pubDate>Mon, 13 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/how-to-work-with-long-constrcutor-parameter-lists/</guid>
      <description>&lt;p&gt;The fourth pattern in Kent Beck&amp;rsquo;s book &amp;lsquo;Smalltalk Best Practice Patterns&amp;rsquo; is called the shortcut constructor method. It was hard for me to understand anything other than the problem it&amp;rsquo;s trying to solve, which is constructors with long lists of parameters. This time, I will not mention how Kent solves this because I don&amp;rsquo;t understand the solution he is proposing, or what I understood looks very stupid to me because I grew up in modern languages, and these old solutions were the best at their own time and context.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Coding Best Practices: The Constructor Parameter Method</title>
      <link>http://localhost:1313/posts/constructor-parameter-method/</link>
      <pubDate>Sun, 12 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/constructor-parameter-method/</guid>
      <description>&lt;p&gt;This is the third pattern discussed in the Smalltalk Patterns book. I found it difficult to understand Kent&amp;rsquo;s intention at first, but here&amp;rsquo;s my interpretation.&lt;/p&gt;&#xA;&lt;p&gt;In the previous &amp;ldquo;best practice&amp;rdquo; or pattern, we discussed the significance of constructors as the sole point of truth for healthy object creation.&lt;/p&gt;&#xA;&lt;p&gt;This time, the focus is on passing parameters to the constructor to initialize the object.&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s the first point:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Directly assigning the parameters to the object isn&amp;rsquo;t safe.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Creating a specific setter for each parameter might lead to code duplication across setters.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;setX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// handle error&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// validation - return error if validation fails&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// validation - return error if validation fails&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, the same validation logic is repeated in both setters.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Coding Best Practices: The Constructor Method</title>
      <link>http://localhost:1313/posts/constructor-method-pattern/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/constructor-method-pattern/</guid>
      <description>&lt;p&gt;One way to construct an object in GoLang is by first creating an object of the type and then directly accessing the fields to put the object in a valid state.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Mohamed&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Age&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem with this approach includes:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Forcing clients to delve into the source code to understand which fields are essential for initialization.&lt;/li&gt;&#xA;&lt;li&gt;Lack of validation.&lt;/li&gt;&#xA;&lt;li&gt;Exposing implementation details.&lt;/li&gt;&#xA;&lt;li&gt;Increasing the surface area of our type, creating more potential points of coupling.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;We can improve this by using a constructor function:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Coding Best Practices: The Composed Method</title>
      <link>http://localhost:1313/posts/composed-method-pattern/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/composed-method-pattern/</guid>
      <description>&lt;p&gt;After reading Kent Beck&amp;rsquo;s book Tidy First, I decided to check out another one by him. This time it&amp;rsquo;s about the best practices in Smalltalk. Even though the book seems old, its ideas are relevant. Let me introduce you to the first pattern from the book, called the Composed Method pattern. This pattern might have different names nowadays, but its main idea is to encourage using smaller functions with names that clearly say what they do.&lt;/p&gt;</description>
    </item>
    <item>
      <title>EDA Patterns: Thin and Thick Events</title>
      <link>http://localhost:1313/posts/eda-patterns-thin-thick-events/</link>
      <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/eda-patterns-thin-thick-events/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/thin-thick-event.svg&#34; alt=&#34;thin and thick events&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Event-driven systems (EDS) rely on exchanging events for communication. Other services &lt;strong&gt;subscribe&lt;/strong&gt; to these events and react accordingly. This loose coupling keeps services unaware of each other, with the only connection being the event&amp;rsquo;s data format. Since events act as contracts, careful design and consideration for future changes are crucial.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; Imagine an e-commerce application. When a customer submits an order, the order service emits an &amp;ldquo;order-requested&amp;rdquo; event. Both the payment service and inventory service are interested in this event. The question is, what format should this event take?&lt;/p&gt;</description>
    </item>
    <item>
      <title>EDA Patterns: The Single Writer Principle</title>
      <link>http://localhost:1313/posts/eda-single-write-principle/</link>
      <pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/eda-single-write-principle/</guid>
      <description>&lt;p&gt;The Single Writer Principle states that only one service should be responsible for making changes to a specific type of data or event.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s consider an e-commerce system with separate services for Orders, Payments, and Shipments. In this scenario, the Order service serves as the single writer for all order-related data. Here&amp;rsquo;s how it works:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;When a customer clicks &amp;ldquo;buy,&amp;rdquo; the Basket service triggers an &amp;ldquo;Order Requested&amp;rdquo; event.&lt;/li&gt;&#xA;&lt;li&gt;The Order service receives this event, validates the order details, and publishes an &amp;ldquo;Order Confirmed&amp;rdquo; event if successful.&lt;/li&gt;&#xA;&lt;li&gt;Other services, such as Payments and Shipments, subscribe to relevant events and take necessary actions upon receiving them (e.g., processing payment or preparing shipment).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The Order service orchestrates these actions, ensuring that all changes to order data are coordinated and consistent.&lt;/p&gt;</description>
    </item>
    <item>
      <title>EDA Patterns: Event sourcing &amp; CQRS</title>
      <link>http://localhost:1313/posts/cqrs/</link>
      <pubDate>Sat, 27 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cqrs/</guid>
      <description>&lt;p&gt;Event sourcing is a data management approach that centers around events, recognizing them as the core building blocks of any system. These events, representing state changes, are stored in an immutable append-only log, preserving the order they occurred in. This approach offers a comprehensive audit trail of the system&amp;rsquo;s activity and allows replaying the event log to reconstruct the current system state.&lt;/p&gt;&#xA;&lt;p&gt;CQRS, or Command Query Responsibility Segregation, complements event sourcing by advocating for the separation of write operations (commands) and read operations (queries). This decoupling brings several advantages. Firstly, it allows for independent optimization of the write model, which might prioritize high throughput like Kafka, and the read model, which might focus on fast queries like a traditional database. Secondly, CQRS facilitates independent scaling of the read and write models based on their specific needs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>EDA Patterns: Idempotent Integration with a Third-Party REST API</title>
      <link>http://localhost:1313/posts/idempotentintegrationwithathird-partyrestapi/</link>
      <pubDate>Fri, 26 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/idempotentintegrationwithathird-partyrestapi/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/idempotent-integration.png&#34; alt=&#34;IdempotentIntegrationwithaThird-PartyRESTAPI&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;You have an event-driven application that needs to integrate with a third-party REST API (Service B) without modifying it. To ensure reliable message processing, you want to introduce Service A as a mediator that consumes events and interacts with Service B in an idempotent manner.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Idempotency Requirement:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Service A:&lt;/strong&gt;  Service A must be idempotent to prevent duplicate event processing. This means if the same event is received multiple times, Service A should only process it once.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Service B:&lt;/strong&gt; Ideally, the calls from Service A to Service B should also be idempotent. This ensures that even if a request is retried due to network issues, it won&amp;rsquo;t cause unintended side effects on Service B.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Quorums Ensure Agreement in Distributed Systems</title>
      <link>http://localhost:1313/posts/majority-quorum/</link>
      <pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/majority-quorum/</guid>
      <description>&lt;p&gt;In distributed systems, where tasks are spread across multiple interconnected machines, quorums provide a fundamental mechanism for ensuring data consistency and system-wide agreement. In essence, a quorum is a minimum number of nodes (machines) that must agree on an operation for it to be valid.  Think of it like a voting threshold. An update to a database or the election of a leader in a cluster – these actions only happen if a designated group (the quorum) participates and reaches a consensus.  The size of this quorum is strategically chosen, often as a majority of the available nodes. This is represented by the formula:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sharding: A Coffee Shop Analogy</title>
      <link>http://localhost:1313/posts/sharding/</link>
      <pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/sharding/</guid>
      <description>&lt;p&gt;Remember our last blog post where we tamed the rush of order requests with a team of baristas dedicated to just reading orders? Well, get ready for another challenge! Our beloved coffee shop is brewing with excitement thanks to new customers and delicious new drinks. This means a flood of updates and sign-ups, and our trusty &amp;ldquo;master barista&amp;rdquo; who handles all these changes is feeling the pressure.&lt;/p&gt;&#xA;&lt;p&gt;Just like throwing more baristas at a long line wouldn&amp;rsquo;t be the smartest idea, we need a well-thought-out plan to tackle this avalanche of updates. In this post, we&amp;rsquo;ll explore two main ways to improve our service – making our master barista stronger and spreading the work around. We&amp;rsquo;ll explain everything using the fun example of our coffee shop.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Replication Topologies for Scaling: A Coffee Shop Analogy</title>
      <link>http://localhost:1313/posts/replication-toplogies/</link>
      <pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/replication-toplogies/</guid>
      <description>&lt;p&gt;Following the coffe shop analogy in the previous blog post, the coffee shop is booming, and you need to expand your team to handle the growing customer base. But simply adding more baristas isn&amp;rsquo;t enough. You need a well-organized system to ensure smooth operations, quick recovery from unexpected situations, and efficient storage of customer preferences. This is where replication topologies come in – different ways to structure your team of baristas and order pads (replicas) to achieve specific goals.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Replication and Sharding: A Coffee Shop Analogy</title>
      <link>http://localhost:1313/posts/replication-and-sharding/</link>
      <pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/replication-and-sharding/</guid>
      <description>&lt;h2 id=&#34;setting-the-stage-for-distributed-storage&#34;&gt;Setting the Stage for Distributed Storage&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/2-single-master-db.png&#34; alt=&#34;single master database&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Non-distributed Storage (Single-Master System):&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Imagine your favorite local coffee shop. Keeping track of customer preferences on a simple notepad (single-server database) is a breeze. New entries are readily added, and the system is clear-cut. However, as the shop&amp;rsquo;s popularity explodes, the notepad becomes a bottleneck.&lt;/p&gt;&#xA;&lt;h2 id=&#34;read-replication&#34;&gt;Read Replication&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/read-replication.png&#34; alt=&#34;read replication&#34;&gt;&#xA;&lt;strong&gt;Read Replication:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The coffee shop thrives and attracts more customers.&lt;/li&gt;&#xA;&lt;li&gt;To handle the increased workload, the barista team expands.&lt;/li&gt;&#xA;&lt;li&gt;The single pad of paper (master database) is replicated for the new baristas (read replicas).&lt;/li&gt;&#xA;&lt;li&gt;The head barista (master) updates the original pad, then copies the changes to the replicas (asynchronously).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Benefits:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kafka Fundamentals: APIs, Topics and Partitions</title>
      <link>http://localhost:1313/posts/kafka-fundamentals-part1/</link>
      <pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/kafka-fundamentals-part1/</guid>
      <description>&lt;p&gt;Kafka is an event streaming platform designed to handle massive volumes of real-time data efficiently. At its core lies a distributed storage system built for scalability, ensuring it can seamlessly accommodate ever-growing data demands.&lt;/p&gt;&#xA;&lt;p&gt;This distributed nature allows Kafka to function as a cluster of machines, each playing a role in storing the data stream. This approach offers significant advantages:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scalability:&lt;/strong&gt; As data volumes increase, additional nodes can be added to the cluster, effectively distributing the storage burden and ensuring smooth operation.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Fault Tolerance:&lt;/strong&gt; If a node fails, the data remains accessible because it&amp;rsquo;s replicated across multiple nodes. This redundancy guarantees high availability and protects against data loss.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Data flows through Kafka using a publish-subscribe model centered around two key APIs:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Microkernel Architecture (Plug-in Architecture)</title>
      <link>http://localhost:1313/posts/microkernel/</link>
      <pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/microkernel/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/The-microkernel-architecture-pattern.png&#34; alt=&#34;layered architecture style&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Microkernel architecture is an architecural style where a minimal core system (the microkernel) handles generic or stable domain tasks.  Other functionalities are provided by pluggable modules and communicate with the core system through well-defined interfaces.&lt;/p&gt;&#xA;&lt;p&gt;You might encounter it in familiar applications:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Web Browser Extensions:&lt;/strong&gt;  Many web browsers allow you to install extensions that add new functionality. These extensions act as plug-ins, extending the core features of the browser without modifying its core code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Layered Architecture Style</title>
      <link>http://localhost:1313/posts/layered-architecture-style/</link>
      <pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/layered-architecture-style/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/layered-architecture-style.png&#34; alt=&#34;layered architecture style&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The &lt;strong&gt;layered architecture&lt;/strong&gt; is a monolithic architectural style that organizes an application into &lt;strong&gt;horizontal layers&lt;/strong&gt;, each focused on &lt;strong&gt;distinct technical concerns&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Understanding the Terms:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Monolithic application:&lt;/strong&gt; The entire application is deployed as a single unit.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Distributed application:&lt;/strong&gt; Application components are split across different machines and communicate through a network.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Technical partitioning:&lt;/strong&gt; Application components are organized based on technical aspects like data access or user interface, rather than business domains.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Layers in the Layered Architecture:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title> Microservices: An Extreme Form of Decoupling for Large-Scale Systems</title>
      <link>http://localhost:1313/posts/microservices-and-coupling/</link>
      <pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/microservices-and-coupling/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;The microservices architecture style represents an extreme form of decoupling tailored for large-scale systems where hundreds of developers collaborate simultaneously. By embracing logical, spatial, temporal, and technology decoupling, teams can work autonomously and iterate rapidly. In this post, we delve into how microservices reduce coupling at various levels, enabling scalability, agility, and independent deployability.&lt;/p&gt;&#xA;&lt;h3 id=&#34;microservices-decoupling-at-scale&#34;&gt;Microservices: Decoupling at Scale&lt;/h3&gt;&#xA;&lt;p&gt;Microservices architecture represents a paradigm shift in software development, embodying the principles of extreme decoupling to address the challenges of building and maintaining large-scale applications. At its core, microservices architecture involves breaking down monolithic applications into smaller, self-contained services, each responsible for a specific business function or capability. These services, often referred to as microservices, operate independently of each other and communicate through well-defined APIs.&lt;/p&gt;</description>
    </item>
    <item>
      <title> Microservices:  Communication Styles</title>
      <link>http://localhost:1313/posts/microservices-synchronus-communication/</link>
      <pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/microservices-synchronus-communication/</guid>
      <description>&lt;p&gt;A communication style refers to the way microservices interact with each other to exchange information and complete tasks. There are two main communication styles:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Synchronous communication&lt;/li&gt;&#xA;&lt;li&gt;Asynchronous communication&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;synchronus-communication&#34;&gt;Synchronus Communication&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/synchronus-communication.png&#34; alt=&#34;synchronus-communication&#34;&gt;&#xA;In microservices architecture, synchronous communication is a method for services to interact with each other directly. It follows a request-response pattern, where one service sends a request to another and waits for a response before continuing. This is similar to how traditional client-server applications work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Context Package: Cause-aware Context Cancellation</title>
      <link>http://localhost:1313/posts/cause/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cause/</guid>
      <description>&lt;p&gt;The context package in Go has recently introduced  cause-aware context cancellation functions. This update includes the &lt;code&gt;WithCancelCause&lt;/code&gt;, &lt;code&gt;WithDeadlineCause&lt;/code&gt;, and &lt;code&gt;WithTimeoutCause&lt;/code&gt; functions, as well as the &lt;code&gt;Cause&lt;/code&gt; function for retrieving the cause of context cancellation.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;WithCancelCause&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cancel&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CancelCauseFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function is analogous to &lt;code&gt;WithCancel&lt;/code&gt;, but it returns a &lt;code&gt;CancelCauseFunc&lt;/code&gt; that allows setting an error as the cause of cancellation.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;WithDeadlineCause&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cause&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CancelFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Combining features of &lt;code&gt;WithDeadline&lt;/code&gt; with the ability to provide a cause for context cancellation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simplify Configuration Management in Go with the &#39;conf&#39; Package</title>
      <link>http://localhost:1313/posts/go-conf-pkg/</link>
      <pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/go-conf-pkg/</guid>
      <description>&lt;p&gt;The &amp;ldquo;conf&amp;rdquo; package is designed to make configuration management in Go straightforward and flexible. It allows you to define your application&amp;rsquo;s configuration as a struct and then parse it for both environment variables and command-line arguments. This approach makes it easy to handle different configuration sources, and the package provides a variety of customization options through struct tags.&lt;/p&gt;&#xA;&lt;p&gt;First, you need to install the &amp;ldquo;conf&amp;rdquo; package:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;go get github.com/ardanlabs/conf/v3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Define a struct that represents your application&amp;rsquo;s configuration. You can use struct tags to specify default values, environment variable names, and other options.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding Go&#39;s init Functions: Best Practices and Common Misuses</title>
      <link>http://localhost:1313/posts/go-init-functions/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/go-init-functions/</guid>
      <description>&lt;p&gt;In Go, &lt;code&gt;init&lt;/code&gt; functions play a crucial role in package initialization. They are used to set up the initial state of your application, and their behavior can be both powerful and tricky to manage. In this blog post, we&amp;rsquo;ll delve into the concept of &lt;code&gt;init&lt;/code&gt; functions, their use cases, execution order, and common pitfalls.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-init-functions&#34;&gt;What Are &lt;code&gt;init&lt;/code&gt; Functions?&lt;/h2&gt;&#xA;&lt;p&gt;In Go, an &lt;code&gt;init&lt;/code&gt; function is a special type of function used for package-level initialization. When a package is imported, the constant and variable declarations within the package are evaluated. After that, the &lt;code&gt;init&lt;/code&gt; functions are executed. Here&amp;rsquo;s a simple example to illustrate:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
